---
import "@fontsource/noto-sans/400.css";
import "@fontsource/noto-sans/700.css";
import "@fontsource/noto-serif/400.css";
import "@fontsource/noto-serif/700.css";
import Header from "./header.astro";
import SocialLinks from "./social-links.astro";

const { title, description } = Astro.props as {
  title: string;
  description: string;
};

const backup =
  "Jake Ord, UX designer, creator of interactive experiences, based in Newcastle, UK.";
---

<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='viewport' content='width=device-width' />
    <meta name='generator' content={Astro.generator} />
    <title>{title ? `${title} | Jake Ord` : backup}</title>
    <meta name='description' content={description} />
    <link rel='icon' href='/favicon.png' />
    <meta name='og:title' content={title ? `${title} | Jake Ord` : backup} />
    <meta name='og:description' content={description} />
    <meta name='og:site_name' content='jakeord.vercel.app' />
    <meta name='og:locale' content='en_GB' />
    <meta name='og:type' content='website' />
    <meta name='og:image' content='/me-london.jpg' />
    <meta name='twitter:card' content='summary' />
    <meta name='twitter:site' content='@ordyboii' />
    <meta name='twitter:image' content='/me-london.jpg' />
    <meta name='twitter:description' content={description} />
  </head>
  <body class='l-flow'>
    <a class='skip-link' href='#content'>Skip to content</a>
    <Header />
    <main class='content'>
      <SocialLinks />
      <div id='content'>
        <slot />
      </div>
    </main>
  </body>
</html>

<style>
  .content {
    display: grid;
    gap: 3rem;
  }

  @media (min-width: 50em) {
    .content {
      grid-template-columns: auto 1fr;
    }
  }

  .skip-link {
    position: absolute;
    top: 1rem;
    left: 1rem;
    padding: 0.8rem 1.2rem;
    background-color: var(--primary);
    color: var(--secondary);
    opacity: 0;
  }

  .skip-link:focus {
    opacity: 1;
  }
</style>

<style is:global>
  /* TOKENS & RESET */
  :root {
    --primary: hsl(50, 20%, 77%);
    --secondary: hsl(200, 42%, 14%);

    --fontSerif: "Noto Serif", serif;
    --fontSans: "Noto Sans", sans-serif;
    --fontBold: 700;
    --fontRegular: 400;
    --fontBase: 1rem;
    --fontScale: 4vw;
    --font2xl: clamp(
      1.9 * var(--fontBase),
      var(--fontScale),
      3 * var(--fontBase)
    );
    --fontXl: clamp(
      1.5 * var(--fontBase),
      var(--fontScale),
      1.9 * var(--fontBase)
    );
    --fontL: clamp(
      1.25 * var(--fontBase),
      var(--fontScale),
      1.5 * var(--fontBase)
    );

    --radius: 0.8rem;
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  * {
    margin: 0;
  }

  html,
  body {
    min-height: 100%;
  }

  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
  }

  input,
  button,
  fontarea,
  select,
  a {
    font: inherit;
    color: inherit;
  }

  /* BASE */

  body {
    --flowSpace: 2.4rem;

    font-family: var(--fontSans);
    line-height: 1.6;
    letter-spacing: 0.03ch;
    background-color: var(--secondary);
    color: var(--primary);
    max-width: 1000px;
    margin-inline: auto;
    padding: 1.2rem;
    isolation: isolate;
    overflow-x: hidden;
  }

  @media (min-width: 50em) {
    body {
      margin-block: 3rem;
    }
  }

  h1,
  h2,
  h3 {
    font-family: var(--fontSerif);
    font-weight: var(--fontBold);
    line-height: 1.2;
  }

  h1 {
    font-size: var(--font2xl);
  }

  h2 {
    font-size: var(--fontXl);
  }

  h3 {
    font-size: var(--fontL);
  }

  p {
    max-width: 60ch;
  }

  p[data-width="wide"] {
    max-width: 100%;
  }

  hr {
    border: 0.5px solid var(--primary);
  }

  ul[role="list"] {
    list-style: none;
    padding: 0;
  }

  a {
    color: currentColor;
  }

  a:where(:hover, :focus, :active) {
    text-decoration: none;
  }

  img {
    object-fit: cover;
  }

  ::selection {
    background-color: var(--primary);
    color: var(--secondary);
  }

  /* LAYOUT */

  .l-flex {
    display: flex;
    gap: var(--flexGap, 1rem);
  }

  .l-flex[data-items="center"] {
    align-items: center;
  }

  .l-flex[data-wrap] {
    flex-wrap: wrap;
  }

  .l-grid {
    display: grid;
    gap: var(--gridGap, 3rem);
  }

  @media (min-width: 50em) {
    .l-grid[data-cols="even"] {
      grid-auto-flow: column;
      grid-auto-columns: 1fr;
    }
  }

  :where(.l-flow > :not(:first-child)) {
    margin-top: var(--flowSpace, 1rem);
  }

  /* UTILITIES */

  .u-flex-shrink-none {
    flex-shrink: 0;
  }

  .u-desktop-only {
    display: none;
  }

  @media (min-width: 50em) {
    .u-desktop-only {
      display: block;
    }
  }
</style>
